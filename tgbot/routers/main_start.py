# - *- coding: utf- 8 - *-
import os

from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, Message, CallbackQuery

from aiogram.utils.media_group import MediaGroupBuilder
from tgbot.database.db_users import UserModel, Userx
from tgbot.keyboards.reply_main import menu_frep
from tgbot.utils.const_functions import ded
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc.bot_logging import bot_logger
from tgbot.services.parser_tendors import get_tenders_from_url, get_excel_from_tenders, get_articles
from tgbot.data.config import BOT_SCHEDULER, PATH_EXCEL, PATH_LOGS
from tgbot.utils.const_functions import get_date

router = Router(name=__name__)


# –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text.in_(()))
@router.message(Command(commands=['start']))
async def main_start(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    await state.clear()
    
    bot_logger.warning(f"command start from {User.user_name}")
    await message.answer(
        ded(f"""
            –ü—Ä–∏–≤–µ—Ç, {User.user_name}
            –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ Tender.pro
            –í–≤–µ–¥–∏—Ç–µ /parser –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (–∏—â–µ—Ç –¥–æ–ª–≥–æ, –º–∏–Ω—É—Ç 10)
            –ò–ª–∏ /get_notif –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 8 –∏ 18 —á–∞—Å–æ–≤
            –ö–æ–º–∞–Ω–¥–∞ /status –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            –ü–æ–∏—Å–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤—ã–≤–µ–¥–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Ç–µ–Ω–¥–µ—Ä—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è, –Ω–µ –≤–∞–∂–Ω–æ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å
            –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–µ –º–Ω–µ
        """),
        reply_markup=menu_frep(message.from_user.id),
    )


# parser
@router.message(F.text.in_(('parser', '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–µ–π—á–∞—Å')))
@router.message(Command(commands=['parser']))
async def parser(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    try:
        bot_logger.warning(f"command parser from {User.user_name}")
        await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤")
        tenders_id = await get_tenders_from_url()
        bot_logger.warning(f"tenders_id: {tenders_id}")
        answ = ""
        for num, tend in enumerate(tenders_id):
            answ += f"{num+1}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ/–∞—Ä—Ç–∏–∫—É–ª: {tend['article']}, id —Ç–µ–Ω–¥–µ—Ä–∞: {tend['id_tender']}, url: {tend['url_tender']} \n \n"
        mes = f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤: \n \n"
        if answ == "":
            mes += "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            mes += answ
        await message.answer(f"{mes}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# status 
@router.message(F.text.in_(('status', '–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞')))
@router.message(Command(commands=['status']))
async def status(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    bot_logger.warning(f"command status from {User.user_name}")
    jobs = BOT_SCHEDULER.get_jobs()
    bot_logger.warning(f"jobs: {jobs[0]}, {jobs[1]}")
    await message.answer(f"jobs: \n{jobs[0]}, \n{jobs[1]}")

# start notification
@router.message(F.text.in_(('–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'get_notif')))
@router.message(Command(commands=['get_notif']))
async def get_notif(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    bot_logger.warning(f"command get_notif from {User.user_name}")
    
    if User.notif == "False":
        Userx.update(User.user_id, notif = "True")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

# stop notification
@router.message(F.text.in_(('–ù–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'stop_get_notif')))
@router.message(Command(commands=['stop_get_notif']))
async def stop_get_notif(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    bot_logger.warning(f"command stop_get_notif from {User.user_name}")
    
    if User.notif == "True":
        Userx.update(User.user_id, notif = "False")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    else:
        await message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–æ—Ç
@router.message(F.content_type.in_({'document', 'file'}))
async def upload_excel(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    if (message.document.file_name.find('.xls') != -1):
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        link_temp = "tgbot/data/articles_sheet_temp.xlsx"
        await bot.download_file(file_path, link_temp)
        try:
            arts = get_articles(link=link_temp)
            bot_logger.warning(f"command upload_excel from {User.user_name}. —Ñ–∞–π–ª: {message.document.file_name}, –∑–∞–≥—Ä—É–∂–µ–Ω")
            await message.answer("–¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            bot_logger.warning(f"command upload_excel from {User.user_name}. —Ñ–∞–π–ª: {message.document.file_name}, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û—à–∏–±–∫–∞ {e}")
            await message.answer(f"–û—à–∏–±–∫–∞ {e} \n–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
        await bot.download_file(file_path, "tgbot/data/articles_sheet.xlsx")
    else:
        bot_logger.warning(f"command upload_excel from {User.user_name}. —Ñ–∞–π–ª: {message.document.file_name}, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xls –∏–ª–∏ .xlsx")


# –í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
@router.message(F.text.in_(('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', 'get_articles')))
@router.message(Command(commands=['get_sheet', 'article']))
async def get_sheet(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    await state.clear()
    await message.answer_document(
        FSInputFile(PATH_EXCEL),
        # caption=f"<b>üì¶ #BACKUP | <code>{get_date()}</code></b>",
        caption=f"–¢–∞–±–ª–∏—Ü–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫",
    )

# –ü–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
@router.message(F.text.in_(('–ü–æ–∏—Å–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è', 'excel_from_tenders')))
@router.message(Command(commands=['excel_from_tenders', 'tenders']))
async def excel_from_tenders(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    await state.clear()
    tenders_id = await get_tenders_from_url(tender_state=100)
    get_excel_from_tenders(tenders_id=tenders_id)
    
    await message.answer_document(
        FSInputFile('tgbot/data/tenders_id_all.xlsx'),
        # caption=f"<b>üì¶ #BACKUP | <code>{get_date()}</code></b>",
        caption=f"–¢–µ–Ω–¥–µ—Ä—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.",
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
@router.message(Command(commands=['log', 'logs']))
async def admin_log(message: Message, bot: Bot, state: FSM, arSession: ARS, User: UserModel):
    await state.clear()

    media_group = MediaGroupBuilder(
        caption=f"<b>üñ® #LOGS | <code>{get_date(full=False)}</code></b>",
    )

    if os.path.isfile(PATH_LOGS):
        media_group.add_document(media=FSInputFile(PATH_LOGS))

    if os.path.isfile("tgbot/data/sv_log_err.log"):
        media_group.add_document(media=FSInputFile("tgbot/data/sv_log_err.log"))

    if os.path.isfile("tgbot/data/sv_log_out.log"):
        media_group.add_document(media=FSInputFile("tgbot/data/sv_log_out.log"))

    await message.answer_media_group(media=media_group.build())


